{"version":3,"sources":["webpack://module.exports/webpack/bootstrap","webpack://module.exports/external \"flarum.core.compat['extend']\"","webpack://module.exports/external \"flarum.core.compat['components/Select']\"","webpack://module.exports/./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","webpack://module.exports/external \"flarum.core.compat['Component']\"","webpack://module.exports/external \"flarum.core.compat['components/Switch']\"","webpack://module.exports/external \"flarum.core.compat['components/Button']\"","webpack://module.exports/external \"flarum.core.compat['components/PermissionGrid']\"","webpack://module.exports/external \"flarum.core.compat['app']\"","webpack://module.exports/external \"flarum.core.compat['components/AdminNav']\"","webpack://module.exports/external \"flarum.core.compat['components/AdminLinkButton']\"","webpack://module.exports/external \"flarum.core.compat['utils/saveSettings']\"","webpack://module.exports/external \"flarum.core.compat['components/Alert']\"","webpack://module.exports/external \"flarum.core.compat['components/UploadImageButton']\"","webpack://module.exports/./src/admin/components/UploadPage.js","webpack://module.exports/./src/admin/addUploadPane.js","webpack://module.exports/./src/admin/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","flarum","core","compat","_inheritsLoose","subClass","superClass","constructor","__proto__","UploadPage_UploadPage","init","_this","this","loading","fields","checkboxes","objects","watermarkPositions","top-left","top-right","bottom-left","bottom-right","center","left","top","right","bottom","settings","app","data","settingsPrefix","uploadMethodOptions","addPrefix","templateOptions","values","forEach","prop","JSON","parse","mimeTypes","^image\\/.*","adapter","template","newMimeType","regex","view","_this2","className","onsubmit","translator","trans","maxFileSize","oninput","withAttr","keys","map","mime","config","updateMimeTypeKey","Select_default","a","component","options","onchange","updateMimeTypeAdapter","getTemplateOptionsForInput","updateMimeTypeTemplate","Button_default","type","children","onclick","deleteMimeType","addMimeType","templateOptionsDescriptions","Switch_default","state","mustResize","resizeMaxWidth","disabled","addsWatermarks","watermarkPosition","UploadImageButton_default","disableHotlinkProtection","disableDownloadLogging","cdnUrl","imgurClientId","awsS3Key","awsS3Secret","awsS3Bucket","awsS3Region","ovhContainer","ovhTenantId","ovhUsername","ovhPassword","ovhRegion","changed","option","push","description","_this3","fieldsCheck","some","checkboxesCheck","objectsCheck","stringify","e","_this4","preventDefault","alerts","dismiss","successAlert","saveSettings_default","then","show","Alert_default","catch","redraw","external_flarum_core_compat_Component_default","addUploadPane","routes","path","extensionSettings","route","external_flarum_core_compat_extend_","AdminNav_default","items","add","AdminLinkButton_default","href","icon","external_flarum_core_compat_app_default","initializers","PermissionGrid_default","label","permission","allowGuest"],"mappings":"2BACA,IAAAA,KAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAC,QAGA,IAAAC,EAAAJ,EAAAE,IACAG,EAAAH,EACAI,GAAA,EACAH,YAUA,OANAI,EAAAL,GAAAM,KAAAJ,EAAAD,QAAAC,IAAAD,QAAAF,GAGAG,EAAAE,GAAA,EAGAF,EAAAD,QA0DA,OArDAF,EAAAQ,EAAAF,EAGAN,EAAAS,EAAAV,EAGAC,EAAAU,EAAA,SAAAR,EAAAS,EAAAC,GACAZ,EAAAa,EAAAX,EAAAS,IACAG,OAAAC,eAAAb,EAAAS,GAA0CK,YAAA,EAAAC,IAAAL,KAK1CZ,EAAAkB,EAAA,SAAAhB,GACA,oBAAAiB,eAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,aAAwDC,MAAA,WAExDP,OAAAC,eAAAb,EAAA,cAAiDmB,OAAA,KAQjDrB,EAAAsB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAArB,EAAAqB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,iBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFA1B,EAAAkB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAArB,EAAAU,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAzB,EAAA6B,EAAA,SAAA1B,GACA,IAAAS,EAAAT,KAAAqB,WACA,WAA2B,OAAArB,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAH,EAAAU,EAAAE,EAAA,IAAAA,GACAA,GAIAZ,EAAAa,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD/B,EAAAkC,EAAA,GAIAlC,IAAAmC,EAAA,oBClFAhC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,sBCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,mDCAA,SAAAC,EAAAC,EAAAC,GACAD,EAAAR,UAAAlB,OAAAY,OAAAe,EAAAT,WACAQ,EAAAR,UAAAU,YAAAF,EACAA,EAAAG,UAAAF,iDCHAtC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,yBCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,oCCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,qCCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,+CCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,mBCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,sCCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,6CCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,qCCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,mCCAAnC,EAAAD,QAAAkC,OAAAC,KAAAC,OAAA,8QCQqBM,4GAEnBC,gBAAO,IAAAC,EAAAC,KAELA,KAAKC,SAAU,EAGfD,KAAKE,QAEH,iBACA,SACA,cACA,uBAEA,YACA,oBAEA,gBAEA,WACA,cACA,cACA,cAEA,cACA,cACA,cACA,eACA,aAIFF,KAAKG,YACH,aACA,uBACA,iBAEA,2BACA,0BAIFH,KAAKI,SACH,aAIFJ,KAAKK,oBACHC,WAAY,WACZC,YAAa,YACbC,cAAe,cACfC,eAAgB,eAChBC,OAAU,SACVC,KAAQ,OACRC,IAAO,MACPC,MAAS,QACTC,OAAU,UAIZ,IAAMC,EAAWC,IAAIC,KAAKF,SAG1Bf,KAAKkB,eAAiB,iBAGtBlB,KAAKmB,oBAAsBJ,EAASf,KAAKoB,UAAU,+BAEnDpB,KAAKqB,gBAAkBN,EAASf,KAAKoB,UAAU,2BAG/CpB,KAAKsB,UAELtB,KAAKE,OAAOqB,QAAQ,SAAA3C,GAAG,OACrBmB,EAAKuB,OAAO1C,GAAOnB,EAAE+D,KAAKT,EAAShB,EAAKqB,UAAUxC,OAEpDoB,KAAKG,WAAWoB,QAAQ,SAAA3C,GAAG,OACzBmB,EAAKuB,OAAO1C,GAAOnB,EAAE+D,KAAuC,MAAlCT,EAAShB,EAAKqB,UAAUxC,OAEpDoB,KAAKI,QAAQmB,QAAQ,SAAA3C,GAAG,OACtBmB,EAAKuB,OAAO1C,GAAOmC,EAAShB,EAAKqB,UAAUxC,IAAQnB,EAAE+D,KAAKC,KAAKC,MAAMX,EAAShB,EAAKqB,UACjFxC,MAAUnB,EAAE+D,SAIhBxB,KAAKsB,OAAOK,cAAgB3B,KAAKsB,OAAOK,UAAYlE,EAAE+D,MACpDI,eACEC,QAAS,QACTC,SAAU,oBAId9B,KAAK+B,aACHC,MAAOvE,EAAE+D,KAAK,IACdK,QAASpE,EAAE+D,KAAK,SAChBM,SAAUrE,EAAE+D,KAAK,YASrBS,gBAAO,IAAAC,EAAAlC,KACL,OACEvC,EAAE,OAAS0E,UAAW,eACpB1E,EAAE,OAAS0E,UAAW,cACpB1E,EAAE,QAAU2E,SAAUpC,KAAKoC,SAASvD,KAAKmB,QACvCvC,EAAE,YAAc0E,UAAW,2BACzB1E,EAAE,YAAcuD,IAAIqB,WAAWC,MAAM,kDACrC7E,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,0DACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAOiB,eAAiB,KACpCC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAOiB,eAE3C9E,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,uDACpC7E,EAAE,OAAS0E,UAAW,wBACpBpE,OAAO2E,KAAK1C,KAAKsB,OAAOK,aACrBgB,IAAI,SAAAC,GACH,IAAIC,EAASX,EAAKZ,OAAOK,YAAYiB,GASrC,MAPsB,iBAAXC,IACTA,GACEhB,QAASgB,EACTf,SAAU,SAIPrE,EAAE,UACPA,EAAE,SACA0E,UAAW,wBACX7D,MAAOsE,EACPJ,QAAS/E,EAAEgF,SAAS,QAASP,EAAKY,kBAAkBjE,KAAKqD,EAAMU,MAEjEG,EAAAC,EAAOC,WACLC,QAAShB,EAAKf,oBACdgC,SAAUjB,EAAKkB,sBAAsBvE,KAAKqD,EAAMU,EAAMC,GACtDvE,MAAOuE,EAAOhB,SAAW,UAE3BkB,EAAAC,EAAOC,WACLC,QAAShB,EAAKmB,6BACdF,SAAUjB,EAAKoB,uBAAuBzE,KAAKqD,EAAMU,EAAMC,GACvDvE,MAAOuE,EAAOf,UAAY,UAE5ByB,EAAAP,EAAOC,WACLO,KAAM,SACNrB,UAAW,yBACXsB,SAAU,IACVC,QAASxB,EAAKyB,eAAe9E,KAAKqD,EAAMU,SAIhDnF,EAAE,MACFA,EAAE,UACAA,EAAE,SACA0E,UAAW,yCACX7D,MAAO0B,KAAK+B,YAAYC,QACxBQ,QAAS/E,EAAEgF,SAAS,QAASzC,KAAK+B,YAAYC,SAEhDe,EAAAC,EAAOC,WACLC,QAASlD,KAAKmB,oBACdgB,UAAW,qBACXK,QAAS/E,EAAEgF,SAAS,QAASzC,KAAK+B,YAAYF,SAC9CvD,MAAO0B,KAAK+B,YAAYF,YAE1BkB,EAAAC,EAAOC,WACLC,QAASlD,KAAKqD,6BACdlB,UAAW,qBACXK,QAAS/E,EAAEgF,SAAS,QAASzC,KAAK+B,YAAYD,UAC9CxD,MAAO0B,KAAK+B,YAAYD,aAE1ByB,EAAAP,EAAOC,WACLO,KAAM,SACNrB,UAAW,yBACXsB,SAAU,IACVC,QAAS1D,KAAK4D,YAAY/E,KAAKmB,WAIrCvC,EAAE,OAAS0E,UAAW,YAAcnB,IAAIqB,WAAWC,MAAM,+CACzD7E,EAAE,OAAS0E,UAAW,YAAcnB,IAAIqB,WAAWC,MAAM,uDACzDtC,KAAK6D,gCAEPpG,EAAE,YAAc0E,UAAW,sBACzB1E,EAAE,YAAcuD,IAAIqB,WAAWC,MAAM,6CACrC7E,EAAE,OAAS0E,UAAW,YAAcnB,IAAIqB,WAAWC,MAAM,2CACzDwB,EAAAd,EAAOC,WACLc,MAAO/D,KAAKsB,OAAO0C,eAAgB,EACnCP,SAAUzC,IAAIqB,WAAWC,MAAM,6CAC/Ba,SAAUnD,KAAKsB,OAAO0C,aAExBvG,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,iDACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAO2C,kBAAoB,IACvCzB,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAO2C,gBACzCC,UAAWlE,KAAKsB,OAAO0C,iBAG3BvG,EAAE,YAAc0E,UAAW,yBACzB1E,EAAE,YAAcuD,IAAIqB,WAAWC,MAAM,gDACrC7E,EAAE,OAAS0E,UAAW,YAAcnB,IAAIqB,WAAWC,MAAM,8CACzDwB,EAAAd,EAAOC,WACLc,MAAO/D,KAAKsB,OAAO6C,mBAAoB,EACvCV,SAAUzC,IAAIqB,WAAWC,MAAM,gDAC/Ba,SAAUnD,KAAKsB,OAAO6C,iBAExB1G,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,mDACpC7E,EAAE,UACAsF,EAAAC,EAAOC,WACLC,QAASlD,KAAKK,mBACd8C,SAAUnD,KAAKsB,OAAO8C,kBACtB9F,MAAO0B,KAAKsB,OAAO8C,qBAAuB,mBAG9C3G,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,+CACpC7E,EAAC4G,EAAArB,GAAkBpF,KAAK,wBAE1BH,EAAE,YAAc0E,UAAW,2BACzB1E,EAAE,YAAcuD,IAAIqB,WAAWC,MAAM,iEACrC7E,EAAE,OACE0E,UAAW,YACbnB,IAAIqB,WAAWC,MAAM,+DACvBwB,EAAAd,EAAOC,WACLc,MAAO/D,KAAKsB,OAAOgD,6BAA8B,EACjDb,SAAUzC,IAAIqB,WAAWC,MACvB,iEACFa,SAAUnD,KAAKsB,OAAOgD,2BAExB7G,EAAE,YAAcuD,IAAIqB,WAAWC,MAAM,+DACrC7E,EAAE,OACE0E,UAAW,YACbnB,IAAIqB,WAAWC,MAAM,6DACvBwB,EAAAd,EAAOC,WACLc,MAAO/D,KAAKsB,OAAOiD,2BAA4B,EAC/Cd,SAAUzC,IAAIqB,WAAWC,MACvB,+DACFa,SAAUnD,KAAKsB,OAAOiD,2BAG1B9G,EAAE,YACA0E,UAAW,qBAEX1E,EAAE,YAAcuD,IAAIqB,WAAWC,MAAM,4CACrC7E,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,8CACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAOkD,UAAY,GAC/BhC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAOkD,YAG7C/G,EAAE,YACA0E,UAAW,qBAEX1E,EAAE,YAAcuD,IAAIqB,WAAWC,MAAM,4CACrC7E,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,gDACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAOmD,iBAAmB,GACtCjC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAOmD,mBAG7ChH,EAAE,YACA0E,UAAW,sBAEX1E,EAAE,YAAcuD,IAAIqB,WAAWC,MAAM,6CACrC7E,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,2CACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAOoD,YAAc,GACjClC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAOoD,YAE3CjH,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,8CACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAOqD,eAAiB,GACpCnC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAOqD,eAE3ClH,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,8CACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAOsD,eAAiB,GACpCpC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAOsD,eAE3CnH,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,8CACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAOuD,eAAiB,GACpCrC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAOuD,iBAG7CpH,EAAE,YACA0E,UAAW,wBAEX1E,EAAE,YAAcuD,IAAIqB,WAAWC,MAAM,+CACrC7E,EAAE,WAEAuD,IAAIqB,WAAWC,MAAM,mDACvB7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAOwD,gBAAkB,GACrCtC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAOwD,gBAE3CrH,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,kDACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAOyD,eAAiB,GACpCvC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAOyD,eAE3CtH,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,kDACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAO0D,eAAiB,GACpCxC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAO0D,eAE3CvH,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,kDACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAO2D,eAAiB,GACpCzC,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAO2D,eAE3CxH,EAAE,WAAauD,IAAIqB,WAAWC,MAAM,gDACpC7E,EAAE,SACA0E,UAAW,cACX7D,MAAO0B,KAAKsB,OAAO4D,aAAe,GAClC1C,QAAS/E,EAAEgF,SAAS,QAASzC,KAAKsB,OAAO4D,eAG7C3B,EAAAP,EAAOC,WACLO,KAAM,SACNrB,UAAW,yBACXsB,SAAUzC,IAAIqB,WAAWC,MAAM,qCAC/BrC,QAASD,KAAKC,QACdiE,UAAWlE,KAAKmF,sBAQ5B9B,sCACE,IAAIH,KAEJ,IAAK,IAAIkC,KAAUpF,KAAKqB,gBACtB6B,EAAQkC,GAAUpF,KAAKqB,gBAAgB+D,GAAQxH,KAGjD,OAAOsF,KAGTJ,2BAAkBF,EAAMtE,GACtB0B,KAAKsB,OAAOK,YAAYrD,GAAS0B,KAAKsB,OAAOK,YAAYiB,GAEzD5C,KAAK2D,eAAef,MAGtBQ,+BAAsBR,EAAMC,EAAQvE,GAClCuE,EAAOhB,QAAUvD,EACjB0B,KAAKsB,OAAOK,YAAYiB,GAAQC,KAGlCS,gCAAuBV,EAAMC,EAAQvE,GACnCuE,EAAOf,SAAWxD,EAClB0B,KAAKsB,OAAOK,YAAYiB,GAAQC,KAGlCc,wBAAef,UACN5C,KAAKsB,OAAOK,YAAYiB,MAGjCiB,uCACE,IAAMJ,KACN,IAAK,IAAI3B,KAAY9B,KAAKqB,gBACxBoC,EAAS4B,KAAK5H,EAAE,KAAMuC,KAAKqB,gBAAgBS,GAAUlE,KAAO,KAAOoC,KAAKqB,gBAAgBS,GAAUwD,cAGpG,OAAO7H,EAAE,KAAMgG,MAGjBG,uBACE5D,KAAKsB,OAAOK,YAAY3B,KAAK+B,YAAYC,UACvCH,QAAS7B,KAAK+B,YAAYF,UAC1BC,SAAU9B,KAAK+B,YAAYD,YAG7B9B,KAAK+B,YAAYC,MAAM,IACvBhC,KAAK+B,YAAYF,QAAQ,SACzB7B,KAAK+B,YAAYD,SAAS,WAS5BqD,mBAAU,IAAAI,EAAAvF,KACJwF,EAAcxF,KAAKE,OAAOuF,KAC5B,SAAA7G,GAAG,OAAI2G,EAAKjE,OAAO1C,OAAWoC,IAAIC,KAAKF,SAASwE,EAAKnE,UAAUxC,MAC7D8G,EAAkB1F,KAAKG,WAAWsF,KACpC,SAAA7G,GAAG,OAAI2G,EAAKjE,OAAO1C,QAAsD,KAA1CoC,IAAIC,KAAKF,SAASwE,EAAKnE,UAAUxC,OAC9D+G,EAAe3F,KAAKI,QAAQqF,KAC9B,SAAA7G,GAAG,OAAI6C,KAAKmE,UAAUL,EAAKjE,OAAO1C,QAAaoC,IAAIC,KAAKF,SAASwE,EAAKnE,UAAUxC,MAClF,OAAO4G,GAAeE,GAAmBC,KAQ3CvD,kBAASyD,GAAG,IAAAC,EAAA9F,KAKV,GAHA6F,EAAEE,kBAGE/F,KAAKC,QAAT,CAGAD,KAAKC,SAAU,EAGfe,IAAIgF,OAAOC,QAAQjG,KAAKkG,cAExB,IAAMnF,KAGNf,KAAKE,OAAOqB,QAAQ,SAAA3C,GAAG,OAAImC,EAAS+E,EAAK1E,UAAUxC,IAAQkH,EAAKxE,OAAO1C,OACvEoB,KAAKG,WAAWoB,QAAQ,SAAA3C,GAAG,OAAImC,EAAS+E,EAAK1E,UAAUxC,IAAQkH,EAAKxE,OAAO1C,OAC3EoB,KAAKI,QAAQmB,QAAQ,SAAA3C,GAAG,OAAImC,EAAS+E,EAAK1E,UAAUxC,IAAQ6C,KAAKmE,UAAUE,EAAKxE,OAAO1C,QAGvFuH,IAAapF,GACVqF,KAAK,WAEJpF,IAAIgF,OAAOK,KAAKP,EAAKI,aAAe,IAAII,EAAAtD,GACtCQ,KAAM,UACNC,SAAUzC,IAAIqB,WAAWC,MAAM,wCAGlCiE,MAAM,cAENH,KAAK,WAEJN,EAAK7F,SAAU,EACfxC,EAAE+I,eASRpF,mBAAUxC,GACR,OAAOoB,KAAKkB,eAAiB,IAAMtC,MA1cC6H,EAAAzD,GCHxC0D,EAAA,WAEI1F,IAAI2F,OAAO,mBAAqBC,KAAM,kBAAmB3D,UAAWpD,EAAWoD,aAG/EjC,IAAI6F,kBAAkB,kBAAoB,kBAAMpJ,EAAEqJ,MAAM9F,IAAI8F,MAAM,oBAElE/I,OAAAgJ,EAAA,OAAAhJ,CAAOiJ,EAAAhE,EAAS/D,UAAW,QAAS,SAAAgI,GAEhCA,EAAMC,IAAI,iBAAkBC,EAAAnE,EAAgBC,WACxCmE,KAAMpG,IAAI8F,MAAM,kBAChBO,KAAM,cACN5D,SAAU,cACV6B,YAAatE,IAAIqB,WAAWC,MAAM,qDCb9CgF,EAAAtE,EAAIuE,aAAaL,IAAI,iBAAkB,SAAAlG,GAEnC0F,IAGA3I,OAAAgJ,EAAA,OAAAhJ,CAAOyJ,EAAAxE,EAAe/D,UAAW,aAAc,SAAAgI,GAC3CA,EAAMC,IAAI,UACNG,KAAM,cACNI,MAAOzG,EAAIqB,WAAWC,MAAM,iDAC5BoF,WAAY,qBAKpB3J,OAAAgJ,EAAA,OAAAhJ,CAAOyJ,EAAAxE,EAAe/D,UAAW,YAAa,SAAAgI,GAC1CA,EAAMC,IAAI,YACNG,KAAM,kBACNI,MAAOzG,EAAIqB,WAAWC,MAAM,mDAC5BoF,WAAY,0BACZC,YAAY","file":"admin.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 18);\n","module.exports = flarum.core.compat['extend'];","module.exports = flarum.core.compat['components/Select'];","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","module.exports = flarum.core.compat['Component'];","module.exports = flarum.core.compat['components/Switch'];","module.exports = flarum.core.compat['components/Button'];","module.exports = flarum.core.compat['components/PermissionGrid'];","module.exports = flarum.core.compat['app'];","module.exports = flarum.core.compat['components/AdminNav'];","module.exports = flarum.core.compat['components/AdminLinkButton'];","module.exports = flarum.core.compat['utils/saveSettings'];","module.exports = flarum.core.compat['components/Alert'];","module.exports = flarum.core.compat['components/UploadImageButton'];","import Component from 'flarum/Component';\r\nimport Button from 'flarum/components/Button';\r\nimport saveSettings from 'flarum/utils/saveSettings';\r\nimport Alert from 'flarum/components/Alert';\r\nimport Select from 'flarum/components/Select';\r\nimport Switch from 'flarum/components/Switch';\r\nimport UploadImageButton from 'flarum/components/UploadImageButton';\r\n\r\nexport default class UploadPage extends Component {\r\n\r\n  init() {\r\n    // whether we are saving the settings or not right now\r\n    this.loading = false;\r\n\r\n    // the fields we need to watch and to save\r\n    this.fields = [\r\n      // image\r\n      'resizeMaxWidth',\r\n      'cdnUrl',\r\n      'maxFileSize',\r\n      'overrideAvatarUpload',\r\n      // watermark\r\n      'watermark',\r\n      'watermarkPosition',\r\n      // Imgur\r\n      'imgurClientId',\r\n      // AWS\r\n      'awsS3Key',\r\n      'awsS3Secret',\r\n      'awsS3Bucket',\r\n      'awsS3Region',\r\n      // OVH\r\n      'ovhUsername',\r\n      'ovhPassword',\r\n      'ovhTenantId',\r\n      'ovhContainer',\r\n      'ovhRegion',\r\n    ];\r\n\r\n    // the checkboxes we need to watch and to save.\r\n    this.checkboxes = [\r\n      'mustResize',\r\n      'overrideAvatarUpload',\r\n      'addsWatermarks',\r\n\r\n      'disableHotlinkProtection',\r\n      'disableDownloadLogging',\r\n    ];\r\n\r\n    // fields that are objects\r\n    this.objects = [\r\n      'mimeTypes'\r\n    ];\r\n\r\n    // watermark positions\r\n    this.watermarkPositions = {\r\n      'top-left': 'top-left',\r\n      'top-right': 'top-right',\r\n      'bottom-left': 'bottom-left',\r\n      'bottom-right': 'bottom-right',\r\n      'center': 'center',\r\n      'left': 'left',\r\n      'top': 'top',\r\n      'right': 'right',\r\n      'bottom': 'bottom'\r\n    };\r\n\r\n    // get the saved settings from the database\r\n    const settings = app.data.settings;\r\n\r\n    // our package prefix (to be added to every field and checkbox in the setting table)\r\n    this.settingsPrefix = 'flagrow.upload';\r\n\r\n    // Options for the Upload methods dropdown menu.\r\n    this.uploadMethodOptions = settings[this.addPrefix('availableUploadMethods')] || {};\r\n    // Options for the Template dropdown menu.\r\n    this.templateOptions = settings[this.addPrefix('availableTemplates')] || {};\r\n\r\n    // Contains current values.\r\n    this.values = {};\r\n    // bind the values of the fields and checkboxes to the getter/setter functions\r\n    this.fields.forEach(key =>\r\n      this.values[key] = m.prop(settings[this.addPrefix(key)])\r\n    );\r\n    this.checkboxes.forEach(key =>\r\n      this.values[key] = m.prop(settings[this.addPrefix(key)] === '1')\r\n    );\r\n    this.objects.forEach(key =>\r\n      this.values[key] = settings[this.addPrefix(key)] ? m.prop(JSON.parse(settings[this.addPrefix(\r\n        key)])) : m.prop()\r\n    );\r\n\r\n    // Set a sane default in case no mimeTypes have been configured yet.\r\n    this.values.mimeTypes() || (this.values.mimeTypes = m.prop({\r\n      '^image\\\\/.*': {\r\n        adapter: 'local',\r\n        template: 'image-preview'\r\n      }\r\n    }));\r\n\r\n    this.newMimeType = {\r\n      regex: m.prop(''),\r\n      adapter: m.prop('local'),\r\n      template: m.prop('file')\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Show the actual ImageUploadPage.\r\n   *\r\n   * @returns {*}\r\n   */\r\n  view() {\r\n    return [\r\n      m('div', { className: 'UploadPage' }, [\r\n        m('div', { className: 'container' }, [\r\n          m('form', { onsubmit: this.onsubmit.bind(this) }, [\r\n            m('fieldset', { className: 'UploadPage-preferences' }, [\r\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.preferences.title')),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.preferences.max_file_size')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.maxFileSize() || 2048,\r\n                oninput: m.withAttr('value', this.values.maxFileSize)\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.preferences.mime_types')),\r\n              m('div', { className: 'MimeTypes--Container' },\r\n                Object.keys(this.values.mimeTypes())\r\n                  .map(mime => {\r\n                    let config = this.values.mimeTypes()[mime];\r\n                    // Compatibility for older versions.\r\n                    if (typeof config !== 'object') {\r\n                      config = {\r\n                        adapter: config,\r\n                        template: 'file'\r\n                      };\r\n                    }\r\n\r\n                    return m('div', {}, [\r\n                      m('input', {\r\n                        className: 'FormControl MimeTypes',\r\n                        value: mime,\r\n                        oninput: m.withAttr('value', this.updateMimeTypeKey.bind(this, mime))\r\n                      }),\r\n                      Select.component({\r\n                        options: this.uploadMethodOptions,\r\n                        onchange: this.updateMimeTypeAdapter.bind(this, mime, config),\r\n                        value: config.adapter || 'local'\r\n                      }),\r\n                      Select.component({\r\n                        options: this.getTemplateOptionsForInput(),\r\n                        onchange: this.updateMimeTypeTemplate.bind(this, mime, config),\r\n                        value: config.template || 'local'\r\n                      }),\r\n                      Button.component({\r\n                        type: 'button',\r\n                        className: 'Button Button--warning',\r\n                        children: 'x',\r\n                        onclick: this.deleteMimeType.bind(this, mime)\r\n                      }),\r\n                    ]);\r\n                  }),\r\n                m('br'),\r\n                m('div', {}, [\r\n                  m('input', {\r\n                    className: 'FormControl MimeTypes add-MimeType-key',\r\n                    value: this.newMimeType.regex(),\r\n                    oninput: m.withAttr('value', this.newMimeType.regex)\r\n                  }),\r\n                  Select.component({\r\n                    options: this.uploadMethodOptions,\r\n                    className: 'add-MimeType-value',\r\n                    oninput: m.withAttr('value', this.newMimeType.adapter),\r\n                    value: this.newMimeType.adapter()\r\n                  }),\r\n                  Select.component({\r\n                    options: this.getTemplateOptionsForInput(),\r\n                    className: 'add-MimeType-value',\r\n                    oninput: m.withAttr('value', this.newMimeType.template),\r\n                    value: this.newMimeType.template()\r\n                  }),\r\n                  Button.component({\r\n                    type: 'button',\r\n                    className: 'Button Button--warning',\r\n                    children: '+',\r\n                    onclick: this.addMimeType.bind(this)\r\n                  }),\r\n                ])\r\n              ),\r\n              m('div', { className: 'helpText' }, app.translator.trans('flagrow-upload.admin.help_texts.mime_types')),\r\n              m('div', { className: 'helpText' }, app.translator.trans('flagrow-upload.admin.help_texts.download_templates')),\r\n              this.templateOptionsDescriptions()\r\n            ]),\r\n            m('fieldset', { className: 'UploadPage-resize' }, [\r\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.resize.title')),\r\n              m('div', { className: 'helpText' }, app.translator.trans('flagrow-upload.admin.help_texts.resize')),\r\n              Switch.component({\r\n                state: this.values.mustResize() || false,\r\n                children: app.translator.trans('flagrow-upload.admin.labels.resize.toggle'),\r\n                onchange: this.values.mustResize\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.resize.max_width')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.resizeMaxWidth() || 100,\r\n                oninput: m.withAttr('value', this.values.resizeMaxWidth),\r\n                disabled: !this.values.mustResize()\r\n              }),\r\n            ]),\r\n            m('fieldset', { className: 'UploadPage-watermark' }, [\r\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.watermark.title')),\r\n              m('div', { className: 'helpText' }, app.translator.trans('flagrow-upload.admin.help_texts.watermark')),\r\n              Switch.component({\r\n                state: this.values.addsWatermarks() || false,\r\n                children: app.translator.trans('flagrow-upload.admin.labels.watermark.toggle'),\r\n                onchange: this.values.addsWatermarks\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.watermark.position')),\r\n              m('div', {}, [\r\n                Select.component({\r\n                  options: this.watermarkPositions,\r\n                  onchange: this.values.watermarkPosition,\r\n                  value: this.values.watermarkPosition() || 'bottom-right'\r\n                }),\r\n              ]),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.watermark.file')),\r\n              <UploadImageButton name=\"flagrow/watermark\" />\r\n            ]),\r\n            m('fieldset', { className: 'UploadPage-downloading' }, [\r\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.disable-hotlink-protection.title')),\r\n              m('div',\r\n                { className: 'helpText' },\r\n                app.translator.trans('flagrow-upload.admin.help_texts.disable-hotlink-protection')),\r\n              Switch.component({\r\n                state: this.values.disableHotlinkProtection() || false,\r\n                children: app.translator.trans(\r\n                  'flagrow-upload.admin.labels.disable-hotlink-protection.toggle'),\r\n                onchange: this.values.disableHotlinkProtection\r\n              }),\r\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.disable-download-logging.title')),\r\n              m('div',\r\n                { className: 'helpText' },\r\n                app.translator.trans('flagrow-upload.admin.help_texts.disable-download-logging')),\r\n              Switch.component({\r\n                state: this.values.disableDownloadLogging() || false,\r\n                children: app.translator.trans(\r\n                  'flagrow-upload.admin.labels.disable-download-logging.toggle'),\r\n                onchange: this.values.disableDownloadLogging\r\n              }),\r\n            ]),\r\n            m('fieldset', {\r\n              className: 'UploadPage-local',\r\n            }, [\r\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.local.title')),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.local.cdn_url')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.cdnUrl() || '',\r\n                oninput: m.withAttr('value', this.values.cdnUrl)\r\n              }),\r\n            ]),\r\n            m('fieldset', {\r\n              className: 'UploadPage-imgur',\r\n            }, [\r\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.imgur.title')),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.imgur.client_id')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.imgurClientId() || '',\r\n                oninput: m.withAttr('value', this.values.imgurClientId)\r\n              }),\r\n            ]),\r\n            m('fieldset', {\r\n              className: 'UploadPage-aws-s3',\r\n            }, [\r\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.title')),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.key')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.awsS3Key() || '',\r\n                oninput: m.withAttr('value', this.values.awsS3Key)\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.secret')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.awsS3Secret() || '',\r\n                oninput: m.withAttr('value', this.values.awsS3Secret)\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.bucket')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.awsS3Bucket() || '',\r\n                oninput: m.withAttr('value', this.values.awsS3Bucket)\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.aws-s3.region')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.awsS3Region() || '',\r\n                oninput: m.withAttr('value', this.values.awsS3Region)\r\n              }),\r\n            ]),\r\n            m('fieldset', {\r\n              className: 'UploadPage-ovh-svfs'\r\n            }, [\r\n              m('legend', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.title')),\r\n              m('label',\r\n                {},\r\n                app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.container')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.ovhContainer() || '',\r\n                oninput: m.withAttr('value', this.values.ovhContainer)\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.tenantid')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.ovhTenantId() || '',\r\n                oninput: m.withAttr('value', this.values.ovhTenantId)\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.username')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.ovhUsername() || '',\r\n                oninput: m.withAttr('value', this.values.ovhUsername)\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.password')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.ovhPassword() || '',\r\n                oninput: m.withAttr('value', this.values.ovhPassword)\r\n              }),\r\n              m('label', {}, app.translator.trans('flagrow-upload.admin.labels.ovh-svfs.region')),\r\n              m('input', {\r\n                className: 'FormControl',\r\n                value: this.values.ovhRegion() || '',\r\n                oninput: m.withAttr('value', this.values.ovhRegion)\r\n              }),\r\n            ]),\r\n            Button.component({\r\n              type: 'submit',\r\n              className: 'Button Button--primary',\r\n              children: app.translator.trans('flagrow-upload.admin.buttons.save'),\r\n              loading: this.loading,\r\n              disabled: !this.changed()\r\n            }),\r\n          ])\r\n        ])\r\n      ])\r\n    ];\r\n  }\r\n\r\n  getTemplateOptionsForInput() {\r\n    let options = [];\r\n\r\n    for (let option in this.templateOptions) {\r\n      options[option] = this.templateOptions[option].name;\r\n    }\r\n\r\n    return options;\r\n  }\r\n\r\n  updateMimeTypeKey(mime, value) {\r\n    this.values.mimeTypes()[value] = this.values.mimeTypes()[mime];\r\n\r\n    this.deleteMimeType(mime);\r\n  }\r\n\r\n  updateMimeTypeAdapter(mime, config, value) {\r\n    config.adapter = value;\r\n    this.values.mimeTypes()[mime] = config;\r\n  }\r\n\r\n  updateMimeTypeTemplate(mime, config, value) {\r\n    config.template = value;\r\n    this.values.mimeTypes()[mime] = config;\r\n  }\r\n\r\n  deleteMimeType(mime) {\r\n    delete this.values.mimeTypes()[mime];\r\n  }\r\n\r\n  templateOptionsDescriptions() {\r\n    const children = [];\r\n    for (let template in this.templateOptions) {\r\n      children.push(m('li', this.templateOptions[template].name + \": \" + this.templateOptions[template].description));\r\n    }\r\n\r\n    return m('ul', children);\r\n  }\r\n\r\n  addMimeType() {\r\n    this.values.mimeTypes()[this.newMimeType.regex()] = {\r\n      adapter: this.newMimeType.adapter(),\r\n      template: this.newMimeType.template()\r\n    };\r\n\r\n    this.newMimeType.regex('');\r\n    this.newMimeType.adapter('local');\r\n    this.newMimeType.template('file');\r\n  }\r\n\r\n  /**\r\n   * Checks if the values of the fields and checkboxes are different from\r\n   * the ones stored in the database\r\n   *\r\n   * @returns boolean\r\n   */\r\n  changed() {\r\n    var fieldsCheck = this.fields.some(\r\n      key => this.values[key]() !== app.data.settings[this.addPrefix(key)]);\r\n    var checkboxesCheck = this.checkboxes.some(\r\n      key => this.values[key]() !== (app.data.settings[this.addPrefix(key)] == '1'));\r\n    var objectsCheck = this.objects.some(\r\n      key => JSON.stringify(this.values[key]()) !== (app.data.settings[this.addPrefix(key)]));\r\n    return fieldsCheck || checkboxesCheck || objectsCheck;\r\n  }\r\n\r\n  /**\r\n   * Saves the settings to the database and redraw the page\r\n   *\r\n   * @param e\r\n   */\r\n  onsubmit(e) {\r\n    // prevent the usual form submit behaviour\r\n    e.preventDefault();\r\n\r\n    // if the page is already saving, do nothing\r\n    if (this.loading) return;\r\n\r\n    // prevents multiple savings\r\n    this.loading = true;\r\n\r\n    // remove previous success popup\r\n    app.alerts.dismiss(this.successAlert);\r\n\r\n    const settings = {};\r\n\r\n    // gets all the values from the form\r\n    this.fields.forEach(key => settings[this.addPrefix(key)] = this.values[key]());\r\n    this.checkboxes.forEach(key => settings[this.addPrefix(key)] = this.values[key]());\r\n    this.objects.forEach(key => settings[this.addPrefix(key)] = JSON.stringify(this.values[key]()));\r\n\r\n    // actually saves everything in the database\r\n    saveSettings(settings)\r\n      .then(() => {\r\n        // on success, show popup\r\n        app.alerts.show(this.successAlert = new Alert({\r\n          type: 'success',\r\n          children: app.translator.trans('core.admin.basics.saved_message')\r\n        }));\r\n      })\r\n      .catch(() => {\r\n      })\r\n      .then(() => {\r\n        // return to the initial state and redraw the page\r\n        this.loading = false;\r\n        m.redraw();\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Adds the prefix `this.settingsPrefix` at the beginning of `key`\r\n   *\r\n   * @returns string\r\n   */\r\n  addPrefix(key) {\r\n    return this.settingsPrefix + '.' + key;\r\n  }\r\n}\r\n","import {extend} from \"flarum/extend\";\r\nimport AdminNav from \"flarum/components/AdminNav\";\r\nimport AdminLinkButton from \"flarum/components/AdminLinkButton\";\r\nimport UploadPage from \"./components/UploadPage\";\r\n\r\nexport default function () {\r\n    // create the route\r\n    app.routes['flagrow-upload'] = {path: '/flagrow/upload', component: UploadPage.component()};\r\n\r\n    // bind the route we created to the three dots settings button\r\n    app.extensionSettings['flagrow-upload'] = () => m.route(app.route('flagrow-upload'));\r\n\r\n    extend(AdminNav.prototype, 'items', items => {\r\n        // add the Image Upload tab to the admin navigation menu\r\n        items.add('flagrow-upload', AdminLinkButton.component({\r\n            href: app.route('flagrow-upload'),\r\n            icon: 'far fa-file',\r\n            children: 'File Upload',\r\n            description: app.translator.trans('flagrow-upload.admin.help_texts.description')\r\n        }));\r\n    });\r\n}","import {extend} from \"flarum/extend\";\r\nimport app from \"flarum/app\";\r\nimport PermissionGrid from \"flarum/components/PermissionGrid\";\r\nimport addUploadPane from \"./addUploadPane\";\r\n\r\napp.initializers.add('flagrow-upload', app => {\r\n    // add the admin pane\r\n    addUploadPane();\r\n\r\n    // add the permission option to the relative pane\r\n    extend(PermissionGrid.prototype, 'startItems', items => {\r\n        items.add('upload', {\r\n            icon: 'far fa-file',\r\n            label: app.translator.trans('flagrow-upload.admin.permissions.upload_label'),\r\n            permission: 'flagrow.upload'\r\n        });\r\n    });\r\n\r\n    // add the permission option to the relative pane\r\n    extend(PermissionGrid.prototype, 'viewItems', items => {\r\n        items.add('download', {\r\n            icon: 'fas fa-download',\r\n            label: app.translator.trans('flagrow-upload.admin.permissions.download_label'),\r\n            permission: 'flagrow.upload.download',\r\n            allowGuest: true\r\n        });\r\n    });\r\n});\r\n"],"sourceRoot":""}